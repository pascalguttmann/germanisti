// Generated by kalamine on 2025-05-16
//
// This XKB symbols file should be copied to:
//     /usr/share/X11/xkb/symbols/custom
// or
//     $XKB_CONFIG_ROOT/symbols/custom
//
// File          : germanisti.xkb_symbols
// Project page  : https://github.com/pascalguttmann/germanisti
// Author        : Pascal Guttmann
// Version       : 1.0.0
// License       : WTFPL - Do What The Fuck You Want Public License
//
// US, no dead keys, altgr greek/german, caps-esc
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
// │ ~   │ ! ₁ │ @ ₂ │ # ₃ │ $ ₄ │ % ₅ │ ^ ₆ │ & ₇ │ * ₈ │ ( ₉ │ ) ₀ │ _ √ │ + ≈ ┃          ┃
// │ ` ° │ 1 ¹ │ 2 ² │ 3 ³ │ 4 ⁴ │ 5 ⁵ │ 6 ⁶ │ 7 ⁷ │ 8 ⁸ │ 9 ⁹ │ 0 ⁰ │ - ß │ = ≠ ┃ ⌫        ┃
// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┯━━━━━━━┩
// ┃        ┃ Q ∅ │ W ∫ │ E € │ R   │ T   │ Y   │ U   │ I   │ O   │ P   │ {   │ }   │ |     │
// ┃ ↹      ┃   ∀ │   ∞ │   ε │   ρ │   τ │   υ │   θ │   ι │   ο │   π │ [ ü │ ] ∝ │ \     │
// ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━━━┪
// ┃         ┃ A   │ S   │ D   │ F   │ G   │ H   │ J   │ K   │ L   │ :   │ "   ┃            ┃
// ┃ ⇬       ┃   α │   σ │   δ │   φ │   γ │   η │   ξ │   κ │   λ │ ; ö │ ' ä ┃ ⏎          ┃
// ┣━━━━━━━━━┻━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┻━━━━━━━━━━━━┫
// ┃            ┃ Z   │ X   │ C   │ V   │ B   │ N   │ M   │ < ∪ │ > ∩ │ ? ∉ ┃               ┃
// ┃ ⇧          ┃   ζ │   χ │   ψ │   ω │   β │   ν │   μ │ , ≤ │ . ≥ │ / ∈ ┃ ⇧             ┃
// ┣━━━━━━━┳━━━━┻━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
// ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ Alt   ┃ super ┃ menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys modifier_keys
xkb_symbols "germanisti" {
    name[group1]= "US, no dead keys, altgr greek/german, caps-esc";
    key.type[group1] = "FOUR_LEVEL";

    // Digits
    key <AE01> {[ 1               , exclam          , onesuperior     , U2081           ]}; // 1 ! ¹ ₁
    key <AE02> {[ 2               , at              , twosuperior     , U2082           ]}; // 2 @ ² ₂
    key <AE03> {[ 3               , numbersign      , threesuperior   , U2083           ]}; // 3 # ³ ₃
    key <AE04> {[ 4               , dollar          , U2074           , U2084           ]}; // 4 $ ⁴ ₄
    key <AE05> {[ 5               , percent         , U2075           , U2085           ]}; // 5 % ⁵ ₅
    key <AE06> {[ 6               , asciicircum     , U2076           , U2086           ]}; // 6 ^ ⁶ ₆
    key <AE07> {[ 7               , ampersand       , U2077           , U2087           ]}; // 7 & ⁷ ₇
    key <AE08> {[ 8               , asterisk        , U2078           , U2088           ]}; // 8 * ⁸ ₈
    key <AE09> {[ 9               , parenleft       , U2079           , U2089           ]}; // 9 ( ⁹ ₉
    key <AE10> {[ 0               , parenright      , U2070           , U2080           ]}; // 0 ) ⁰ ₀

    // Letters, first row
    key <AD01> {[ q               , Q               , U2200           , U2205           ]}; // q Q ∀ ∅
    key <AD02> {[ w               , W               , infinity        , integral        ]}; // w W ∞ ∫
    key <AD03> {[ e               , E               , U03B5           , EuroSign        ]}; // e E ε €
    key <AD04> {[ r               , R               , U03C1           , U03A1           ]}; // r R ρ Ρ
    key <AD05> {[ t               , T               , U03C4           , U03A4           ]}; // t T τ Τ
    key <AD06> {[ y               , Y               , U03C5           , U03A5           ]}; // y Y υ Υ
    key <AD07> {[ u               , U               , U03B8           , U0398           ]}; // u U θ Θ
    key <AD08> {[ i               , I               , U03B9           , U0399           ]}; // i I ι Ι
    key <AD09> {[ o               , O               , U03BF           , U039F           ]}; // o O ο Ο
    key <AD10> {[ p               , P               , U03C0           , U03A0           ]}; // p P π Π

    // Letters, second row
    key <AC01> {[ a               , A               , U03B1           , U0391           ]}; // a A α Α
    key <AC02> {[ s               , S               , U03C3           , U03A3           ]}; // s S σ Σ
    key <AC03> {[ d               , D               , U03B4           , U0394           ]}; // d D δ Δ
    key <AC04> {[ f               , F               , U03C6           , U03A6           ]}; // f F φ Φ
    key <AC05> {[ g               , G               , U03B3           , U0393           ]}; // g G γ Γ
    key <AC06> {[ h               , H               , U03B7           , U0397           ]}; // h H η Η
    key <AC07> {[ j               , J               , U03BE           , U039E           ]}; // j J ξ Ξ
    key <AC08> {[ k               , K               , U03BA           , U039A           ]}; // k K κ Κ
    key <AC09> {[ l               , L               , U03BB           , U039B           ]}; // l L λ Λ
    key <AC10> {[ semicolon       , colon           , odiaeresis      , Odiaeresis      ]}; // ; : ö Ö

    // Letters, third row
    key <AB01> {[ z               , Z               , U03B6           , U0396           ]}; // z Z ζ Ζ
    key <AB02> {[ x               , X               , U03C7           , U03A7           ]}; // x X χ Χ
    key <AB03> {[ c               , C               , U03C8           , U03A8           ]}; // c C ψ Ψ
    key <AB04> {[ v               , V               , U03C9           , U03A9           ]}; // v V ω Ω
    key <AB05> {[ b               , B               , U03B2           , U0392           ]}; // b B β Β
    key <AB06> {[ n               , N               , U03BD           , U039D           ]}; // n N ν Ν
    key <AB07> {[ m               , M               , U03BC           , U039C           ]}; // m M μ Μ
    key <AB08> {[ comma           , less            , lessthanequal   , union           ]}; // , < ≤ ∪
    key <AB09> {[ period          , greater         , greaterthanequal, intersection    ]}; // . > ≥ ∩
    key <AB10> {[ slash           , question        , U2208           , U2209           ]}; // / ? ∈ ∉

    // Pinky keys
    key <AE11> {[ minus           , underscore      , ssharp          , radical         ]}; // - _ ß √
    key <AE12> {[ equal           , plus            , notequal        , U2248           ]}; // = + ≠ ≈
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , udiaeresis      , Udiaeresis      ]}; // [ { ü Ü
    key <AD12> {[ bracketright    , braceright      , variation       , VoidSymbol      ]}; // ] } ∝
    key <AC11> {[ apostrophe      , quotedbl        , adiaeresis      , Adiaeresis      ]}; // ' " ä Ä
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , degree          , VoidSymbol      ]}; // ` ~ °
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //

    // Space bar
    key <SPCE> {[ space           , space           , space           , space           ]}; //

    include "level3(ralt_switch)"
};
// vim: ft=xkb:fdm=indent:ts=4:nowrap
